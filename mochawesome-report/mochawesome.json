{
  "stats": {
    "suites": 15,
    "tests": 122,
    "passes": 116,
    "pending": 0,
    "failures": 6,
    "start": "2025-05-04T20:18:35.919Z",
    "end": "2025-05-04T20:18:36.110Z",
    "duration": 191,
    "testsRegistered": 122,
    "passPercent": 95.08196721311475,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e43cf70d-16ab-46e9-aef0-54dd63ede25a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
          "title": "findMax",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\arrayUtils.spec.js",
          "file": "\\test\\arrayUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the maximum value from an array of numbers",
              "fullTitle": "findMax should return the maximum value from an array of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([1, 2, 3, 10, 4])).to.equal(10);\nexpect(findMax([-5, -1, -10])).to.equal(-1);",
              "err": {},
              "uuid": "ba59a5d3-488f-4b6d-b5ee-9728302d9337",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the maximum value when all elements are the same",
              "fullTitle": "findMax should return the maximum value when all elements are the same",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([5, 5, 5, 5])).to.equal(5);",
              "err": {},
              "uuid": "dd8eac9e-4358-4097-b15e-dadc926d3cef",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the only value if array has one element",
              "fullTitle": "findMax should return the only value if array has one element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([7])).to.equal(7);",
              "err": {},
              "uuid": "ee49560f-9e42-4e67-8792-a411c97abe87",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return Infinity when array contains Infinity",
              "fullTitle": "findMax should return Infinity when array contains Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([Infinity, 10, 2])).to.equal(Infinity);",
              "err": {},
              "uuid": "80a5d331-2767-45d1-a75a-c7f301a9fcd0",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not an array",
              "fullTitle": "findMax should throw an error if input is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => findMax('hello, word!')).to.throw('Input must be an array');\nexpect(() => findMax(123)).to.throw('Input must be an array');\nexpect(() => findMax(null)).to.throw('Input must be an array');",
              "err": {},
              "uuid": "db30c28b-d395-4901-857f-77aa826c56be",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore NaN when looking for the maximum value",
              "fullTitle": "findMax should ignore NaN when looking for the maximum value",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(findMax([5, 10, NaN, 3])).to.equal(10);",
              "err": {
                "message": "AssertionError: expected NaN to equal 10",
                "estack": "AssertionError: expected NaN to equal 10\n    at Context.<anonymous> (file:///D:/sdc-AQA/SDC-AQA/test/arrayUtils.spec.js:29:41)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- NaN\n+ 10\n"
              },
              "uuid": "2893ab87-4658-40f4-b7db-d5dc30dbce8a",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -Infinity for an empty array (works like Math.max behavior)",
              "fullTitle": "findMax should return -Infinity for an empty array (works like Math.max behavior)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMax([])).to.equal(-Infinity);",
              "err": {},
              "uuid": "18e322fb-803a-490f-9ca5-ba869c63a542",
              "parentUUID": "bc8cf2fe-2175-43a0-bb87-14aee354a946",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba59a5d3-488f-4b6d-b5ee-9728302d9337",
            "dd8eac9e-4358-4097-b15e-dadc926d3cef",
            "ee49560f-9e42-4e67-8792-a411c97abe87",
            "80a5d331-2767-45d1-a75a-c7f301a9fcd0",
            "db30c28b-d395-4901-857f-77aa826c56be",
            "18e322fb-803a-490f-9ca5-ba869c63a542"
          ],
          "failures": [
            "2893ab87-4658-40f4-b7db-d5dc30dbce8a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
          "title": "findMin",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\arrayUtils.spec.js",
          "file": "\\test\\arrayUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the minimum value from an array of numbers",
              "fullTitle": "findMin should return the minimum value from an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([1, 2, 3, -10, 4])).to.equal(-10);\nexpect(findMin([-5, -1, -10])).to.equal(-10);",
              "err": {},
              "uuid": "7d26af3d-2c02-45db-aa8e-4adac8fda174",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the minimum value when all elements are the same",
              "fullTitle": "findMin should return the minimum value when all elements are the same",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([5, 5, 5, 5])).to.equal(5);",
              "err": {},
              "uuid": "20d7a53e-7c49-49c0-bfdd-90d2d19128ab",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the only value if array has one element",
              "fullTitle": "findMin should return the only value if array has one element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([42])).to.equal(42);",
              "err": {},
              "uuid": "e53bdb9c-7784-48b0-b25a-f8fa08307f37",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -Infinity when array contains -Infinity",
              "fullTitle": "findMin should return -Infinity when array contains -Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([-Infinity, -10, -2])).to.equal(-Infinity);",
              "err": {},
              "uuid": "cc1760bb-6fb3-4aea-a91d-4f457a1475dd",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not an array",
              "fullTitle": "findMin should throw an error if input is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => findMin('hello, word!')).to.throw('Input must be an array');\nexpect(() => findMin(undefined)).to.throw('Input must be an array');\nexpect(() => findMin({})).to.throw('Input must be an array');",
              "err": {},
              "uuid": "db49ad04-f376-4ff0-9ff1-e2b0baf391e6",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore NaN when looking for the minimum value",
              "fullTitle": "findMin should ignore NaN when looking for the minimum value",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(findMin([5, 10, NaN, 3])).to.equal(3);",
              "err": {
                "message": "AssertionError: expected NaN to equal 3",
                "estack": "AssertionError: expected NaN to equal 3\n    at Context.<anonymous> (file:///D:/sdc-AQA/SDC-AQA/test/arrayUtils.spec.js:62:41)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- NaN\n+ 3\n"
              },
              "uuid": "f3b9095e-57b3-42dd-a489-b9377fcaac08",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return Infinity for an empty array (works like Math.min behavior)",
              "fullTitle": "findMin should return Infinity for an empty array (works like Math.min behavior)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findMin([])).to.equal(Infinity);",
              "err": {},
              "uuid": "32a9486b-d916-483b-94f5-35f9465ec803",
              "parentUUID": "89bd7afe-3a63-468f-a40c-5fdd347f7f47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d26af3d-2c02-45db-aa8e-4adac8fda174",
            "20d7a53e-7c49-49c0-bfdd-90d2d19128ab",
            "e53bdb9c-7784-48b0-b25a-f8fa08307f37",
            "cc1760bb-6fb3-4aea-a91d-4f457a1475dd",
            "db49ad04-f376-4ff0-9ff1-e2b0baf391e6",
            "32a9486b-d916-483b-94f5-35f9465ec803"
          ],
          "failures": [
            "f3b9095e-57b3-42dd-a489-b9377fcaac08"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
          "title": "removeDuplicates",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\arrayUtils.spec.js",
          "file": "\\test\\arrayUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove duplicates from array",
              "fullTitle": "removeDuplicates should remove duplicates from array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([1, 2, 2, 3, 3, 3])).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "19c23395-6ad6-4cb0-8785-ec4ac4597a9d",
              "parentUUID": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return same array if there are no duplicates",
              "fullTitle": "removeDuplicates should return same array if there are no duplicates",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([1, 2, 3])).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "ea9f57a2-3e42-4934-8237-fe65e3212aa2",
              "parentUUID": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array if input is empty",
              "fullTitle": "removeDuplicates should return empty array if input is empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([])).to.deep.equal([]);",
              "err": {},
              "uuid": "a05af42e-4e3d-4832-8668-6530750d3123",
              "parentUUID": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle array with one element",
              "fullTitle": "removeDuplicates should handle array with one element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([7])).to.deep.equal([7]);",
              "err": {},
              "uuid": "ad057db6-f908-4514-af07-43493974fe34",
              "parentUUID": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with mixed types (string, number)",
              "fullTitle": "removeDuplicates should work with mixed types (string, number)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(removeDuplicates([1, '1', 1])).to.deep.equal([1, '1']);",
              "err": {},
              "uuid": "5af89494-5012-4c2b-ad26-210d14263f9d",
              "parentUUID": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not an array",
              "fullTitle": "removeDuplicates should throw an error if input is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => removeDuplicates('hello, word!')).to.throw('Input must be an array');\nexpect(() => removeDuplicates(123)).to.throw('Input must be an array');",
              "err": {},
              "uuid": "54e878ea-2c07-41d1-a6f3-6f5d949bd9e8",
              "parentUUID": "68478d6e-34c9-4b96-8e0a-17668bd4ce43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19c23395-6ad6-4cb0-8785-ec4ac4597a9d",
            "ea9f57a2-3e42-4934-8237-fe65e3212aa2",
            "a05af42e-4e3d-4832-8668-6530750d3123",
            "ad057db6-f908-4514-af07-43493974fe34",
            "5af89494-5012-4c2b-ad26-210d14263f9d",
            "54e878ea-2c07-41d1-a6f3-6f5d949bd9e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5be878e3-624c-443d-92b6-9810311495dc",
          "title": "add(a, b)",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\mathUtils.spec.js",
          "file": "\\test\\mathUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return correct result for two positive numbers",
              "fullTitle": "add(a, b) should return correct result for two positive numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1, 2)).to.equal(3);",
              "err": {},
              "uuid": "865f9fce-f775-4173-9392-8f47002f7d17",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for one positive and one negative number",
              "fullTitle": "add(a, b) should return correct result for one positive and one negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1, -2)).to.equal(-1);\nexpect(add(-5, 2)).to.equal(-3);",
              "err": {},
              "uuid": "dd1b50b8-9c8f-48d5-a63b-dc4d6df01abe",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for two negative numbers",
              "fullTitle": "add(a, b) should return correct result for two negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1, -2)).to.equal(-3);",
              "err": {},
              "uuid": "128372dd-0b2a-4341-b003-98712d841b67",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle addition with zero",
              "fullTitle": "add(a, b) should handle addition with zero",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 12)).to.equal(12);\nexpect(add(-1, 0)).to.equal(-1);",
              "err": {},
              "uuid": "d478a170-aa02-4d7d-b579-e0b6378f3243",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for integers and decimals",
              "fullTitle": "add(a, b) should return correct result for integers and decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-1.5, 1)).to.equal(-0.5);\nexpect(add(3.4, 3)).to.equal(6.4);",
              "err": {},
              "uuid": "0103605e-e917-42f8-9fb2-dd79bd7b599b",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for two decimal numbers",
              "fullTitle": "add(a, b) should return correct result for two decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5.5, 3.72)).to.be.closeTo(9.22, 0.001);\nexpect(add(-1.5, 1.5)).to.equal(0);",
              "err": {},
              "uuid": "e15a6058-6f1c-471c-9a0f-01000bea8908",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle MAX_SAFE_INTEGER correctly",
              "fullTitle": "add(a, b) should handle MAX_SAFE_INTEGER correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(Number.MAX_SAFE_INTEGER, 0)).to.equal(Number.MAX_SAFE_INTEGER);",
              "err": {},
              "uuid": "dd983728-cc46-4a60-ae30-c0cdee6136a0",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle MIN_VALUE correctly",
              "fullTitle": "add(a, b) should handle MIN_VALUE correctly",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(Number.MIN_VALUE, 1)).to.equal(1 + Number.MIN_VALUE);",
              "err": {},
              "uuid": "2f1e6efd-b0f7-4a32-a22a-58085fc60cb4",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric inputs",
              "fullTitle": "add(a, b) should return NaN for non-numeric inputs",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add('a', 1)).to.be.NaN;\nexpect(add(1, null)).to.be.NaN;\nexpect(add(undefined, 2)).to.be.NaN;\nexpect(add({}, 2)).to.be.NaN;\nexpect(add([], 2)).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected 'a1' to be NaN",
                "estack": "AssertionError: expected 'a1' to be NaN\n    at Context.<anonymous> (file:///D:/sdc-AQA/SDC-AQA/test/mathUtils.spec.js:43:30)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "09a8bb34-2dab-4945-92f0-fc72712ff459",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when arguments are missing",
              "fullTitle": "add(a, b) should return NaN when arguments are missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.be.NaN;\nexpect(add(2)).to.be.NaN;",
              "err": {},
              "uuid": "d13e2ad6-256e-4243-9f98-c26f811d62a1",
              "parentUUID": "5be878e3-624c-443d-92b6-9810311495dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "865f9fce-f775-4173-9392-8f47002f7d17",
            "dd1b50b8-9c8f-48d5-a63b-dc4d6df01abe",
            "128372dd-0b2a-4341-b003-98712d841b67",
            "d478a170-aa02-4d7d-b579-e0b6378f3243",
            "0103605e-e917-42f8-9fb2-dd79bd7b599b",
            "e15a6058-6f1c-471c-9a0f-01000bea8908",
            "dd983728-cc46-4a60-ae30-c0cdee6136a0",
            "2f1e6efd-b0f7-4a32-a22a-58085fc60cb4",
            "d13e2ad6-256e-4243-9f98-c26f811d62a1"
          ],
          "failures": [
            "09a8bb34-2dab-4945-92f0-fc72712ff459"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
          "title": "subtract(a, b)",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\mathUtils.spec.js",
          "file": "\\test\\mathUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return correct result for two positive numbers",
              "fullTitle": "subtract(a, b) should return correct result for two positive numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(5, 1)).to.equal(4);",
              "err": {},
              "uuid": "87885b3e-83ab-4ef8-b57f-939046cd53dc",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for positive and negative combinations",
              "fullTitle": "subtract(a, b) should return correct result for positive and negative combinations",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(1, -2)).to.equal(3);\nexpect(subtract(-5, 2)).to.equal(-7);",
              "err": {},
              "uuid": "d4c5863b-4057-4f5d-80a1-79d050a6f57d",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for two negative numbers",
              "fullTitle": "subtract(a, b) should return correct result for two negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(-1, -2)).to.equal(1);",
              "err": {},
              "uuid": "431bf5ea-b117-40f1-ba4b-a08f1a5e8a05",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle subtraction with zero",
              "fullTitle": "subtract(a, b) should handle subtraction with zero",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(0, 12)).to.equal(-12);\nexpect(subtract(0, -2)).to.equal(2);",
              "err": {},
              "uuid": "b057ef02-34fc-42ef-b4ce-fea314cb9152",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for integers and decimals",
              "fullTitle": "subtract(a, b) should return correct result for integers and decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(-1.5, 1)).to.equal(-2.5);\nexpect(subtract(3.4, 3)).to.be.closeTo(0.4, 0.001);",
              "err": {},
              "uuid": "d7a41e35-f7c8-4165-9fc3-d6089175bba6",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for two decimal numbers",
              "fullTitle": "subtract(a, b) should return correct result for two decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(5.5, 3.72)).to.be.closeTo(1.78, 0.001);\nexpect(subtract(-1.5, 1.45)).to.be.closeTo(-2.95, 0.001);",
              "err": {},
              "uuid": "4f0974fd-ba15-48a2-8b26-1dec2cf529cd",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle MAX_SAFE_INTEGER correctly",
              "fullTitle": "subtract(a, b) should handle MAX_SAFE_INTEGER correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(Number.MAX_SAFE_INTEGER, 1)).to.equal(Number.MAX_SAFE_INTEGER - 1);",
              "err": {},
              "uuid": "b0789e94-cc88-4844-8cc8-ed68b4638ab6",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle MIN_VALUE correctly",
              "fullTitle": "subtract(a, b) should handle MIN_VALUE correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract(Number.MIN_VALUE, 1)).to.equal(Number.MIN_VALUE - 1);",
              "err": {},
              "uuid": "96ba2bde-91b5-4048-a7cd-944ff3bc39c6",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric inputs",
              "fullTitle": "subtract(a, b) should return NaN for non-numeric inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(subtract('a', 1)).to.be.NaN;\nexpect(subtract(1, null)).to.be.NaN;\nexpect(subtract(undefined, 2)).to.be.NaN;\nexpect(subtract({}, 2)).to.be.NaN;\nexpect(subtract([], 2)).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected 1 to be NaN",
                "estack": "AssertionError: expected 1 to be NaN\n    at Context.<anonymous> (file:///D:/sdc-AQA/SDC-AQA/test/mathUtils.spec.js:96:36)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "6654982c-3db3-4737-bb5a-2ca4bdbb9b03",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when arguments are missing",
              "fullTitle": "subtract(a, b) should return NaN when arguments are missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(subtract()).to.be.NaN;\nexpect(subtract(2)).to.be.NaN;",
              "err": {},
              "uuid": "afc28106-f777-4995-a721-d51626843051",
              "parentUUID": "2fa2c591-cedc-420b-b851-ee7e58bd1458",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87885b3e-83ab-4ef8-b57f-939046cd53dc",
            "d4c5863b-4057-4f5d-80a1-79d050a6f57d",
            "431bf5ea-b117-40f1-ba4b-a08f1a5e8a05",
            "b057ef02-34fc-42ef-b4ce-fea314cb9152",
            "d7a41e35-f7c8-4165-9fc3-d6089175bba6",
            "4f0974fd-ba15-48a2-8b26-1dec2cf529cd",
            "b0789e94-cc88-4844-8cc8-ed68b4638ab6",
            "96ba2bde-91b5-4048-a7cd-944ff3bc39c6",
            "afc28106-f777-4995-a721-d51626843051"
          ],
          "failures": [
            "6654982c-3db3-4737-bb5a-2ca4bdbb9b03"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
          "title": "multiply(a, b)",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\mathUtils.spec.js",
          "file": "\\test\\mathUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 6 when multiplying 2 and 3",
              "fullTitle": "multiply(a, b) should return 6 when multiplying 2 and 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(2, 3)).to.equal(6);",
              "err": {},
              "uuid": "b4355b39-9780-42ac-975e-e89dc492165e",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when multiplying any number by 0",
              "fullTitle": "multiply(a, b) should return 0 when multiplying any number by 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(0, 5)).to.equal(0);\nexpect(multiply(7, 0)).to.equal(0);",
              "err": {},
              "uuid": "78576daa-ef8f-42dc-97fa-09fb1d5d8c0e",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return negative result for positive * negative",
              "fullTitle": "multiply(a, b) should return negative result for positive * negative",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(-4, 5)).to.equal(-20);\nexpect(multiply(3, -2)).to.equal(-6);",
              "err": {},
              "uuid": "7b02f703-38a5-4cf7-8996-f01f510ef57f",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return positive result for two negatives",
              "fullTitle": "multiply(a, b) should return positive result for two negatives",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(-3, -3)).to.equal(9);",
              "err": {},
              "uuid": "7983e9ef-81a5-43b6-97ed-9f39f8b0c9ae",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers",
              "fullTitle": "multiply(a, b) should handle very large numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(Number.MAX_SAFE_INTEGER, 1)).to.equal(Number.MAX_SAFE_INTEGER);",
              "err": {},
              "uuid": "e31fa4da-cc78-4bf7-ab7d-c2f4741c7442",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very small numbers",
              "fullTitle": "multiply(a, b) should handle very small numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(Number.MIN_VALUE, 1)).to.equal(Number.MIN_VALUE);",
              "err": {},
              "uuid": "c541bf72-90c2-418f-8c3d-3e551bd8db32",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle zero edge case",
              "fullTitle": "multiply(a, b) should handle zero edge case",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "147f3561-8474-4be1-97d8-0832ee33c532",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when passed a non-number",
              "fullTitle": "multiply(a, b) should return NaN when passed a non-number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(multiply('3', 2)).to.be.NaN;\nexpect(multiply(null, 2)).to.be.NaN;\nexpect(multiply(undefined, 2)).to.be.NaN;\nexpect(multiply({}, 2)).to.be.NaN;\nexpect(multiply([], 2)).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected 6 to be NaN",
                "estack": "AssertionError: expected 6 to be NaN\n    at Context.<anonymous> (file:///D:/sdc-AQA/SDC-AQA/test/mathUtils.spec.js:141:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "8f00b6af-72b6-457a-8f32-1907bcf11b09",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN if one or both args are missing",
              "fullTitle": "multiply(a, b) should return NaN if one or both args are missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(multiply()).to.be.NaN;\nexpect(multiply(2)).to.be.NaN;",
              "err": {},
              "uuid": "b8f4350f-1562-4fa1-8b15-287354a3234e",
              "parentUUID": "a8a18f7e-f7a8-48a6-a1c7-45740fc95d96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4355b39-9780-42ac-975e-e89dc492165e",
            "78576daa-ef8f-42dc-97fa-09fb1d5d8c0e",
            "7b02f703-38a5-4cf7-8996-f01f510ef57f",
            "7983e9ef-81a5-43b6-97ed-9f39f8b0c9ae",
            "e31fa4da-cc78-4bf7-ab7d-c2f4741c7442",
            "c541bf72-90c2-418f-8c3d-3e551bd8db32",
            "147f3561-8474-4be1-97d8-0832ee33c532",
            "b8f4350f-1562-4fa1-8b15-287354a3234e"
          ],
          "failures": [
            "8f00b6af-72b6-457a-8f32-1907bcf11b09"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
          "title": "divide(a, b)",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\mathUtils.spec.js",
          "file": "\\test\\mathUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return correct result for two positive numbers",
              "fullTitle": "divide(a, b) should return correct result for two positive numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 2)).to.equal(3);",
              "err": {},
              "uuid": "a31033ff-0033-4b0e-a5e4-863b793a4eed",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct result for one positive and one negative",
              "fullTitle": "divide(a, b) should return correct result for one positive and one negative",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, -2)).to.equal(-3);\nexpect(divide(-9, 3)).to.equal(-3);",
              "err": {},
              "uuid": "ac25d6c6-4bc3-45d2-86a9-35a453d5ada3",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return positive result for two negative numbers",
              "fullTitle": "divide(a, b) should return positive result for two negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(-8, -2)).to.equal(4);",
              "err": {},
              "uuid": "3661083c-da33-4875-912f-6a19cbd87a79",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when numerator is 0",
              "fullTitle": "divide(a, b) should return 0 when numerator is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {},
              "uuid": "d56cdd25-eb27-4aac-a2a3-5b101d3bf945",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return decimal result when needed",
              "fullTitle": "divide(a, b) should return decimal result when needed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(5, 2)).to.equal(2.5);\nexpect(divide(1, 3)).to.be.closeTo(0.333, 0.001);",
              "err": {},
              "uuid": "60107e00-beea-41a9-b854-b5b8771703b6",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers",
              "fullTitle": "divide(a, b) should handle very large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(Number.MAX_SAFE_INTEGER, 1)).to.equal(Number.MAX_SAFE_INTEGER);",
              "err": {},
              "uuid": "b26be1d5-6da0-46f6-9a0a-99df25d4446d",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very small numbers",
              "fullTitle": "divide(a, b) should handle very small numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(Number.MIN_VALUE, 1)).to.equal(Number.MIN_VALUE);",
              "err": {},
              "uuid": "d0fc8d2d-cb23-48d7-830a-bf88dfe722d4",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when dividing by zero",
              "fullTitle": "divide(a, b) should throw an error when dividing by zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(5, 0)).to.throw('Cannot divide by zero');\nexpect(() => divide(0, 0)).to.throw('Cannot divide by zero');",
              "err": {},
              "uuid": "35f3ab8a-befa-4f02-9ea5-0f9584959da7",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric inputs",
              "fullTitle": "divide(a, b) should return NaN for non-numeric inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide('a', 2)).to.be.NaN;\nexpect(divide(undefined, 2)).to.be.NaN;\nexpect(divide({}, 2)).to.be.NaN;\nexpect(divide([], 2)).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///D:/sdc-AQA/SDC-AQA/test/mathUtils.spec.js:195:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "3b424be0-3d40-4895-bfa5-0f6cf95e5f2f",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when the second argument is missing",
              "fullTitle": "divide(a, b) should return NaN when the second argument is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(2)).to.be.NaN;\nexpect(divide()).to.be.NaN;",
              "err": {},
              "uuid": "81d2fc55-1187-4905-abf3-e0a2d73e1657",
              "parentUUID": "eded301f-0c59-4a07-9fdf-14aa9d2573fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a31033ff-0033-4b0e-a5e4-863b793a4eed",
            "ac25d6c6-4bc3-45d2-86a9-35a453d5ada3",
            "3661083c-da33-4875-912f-6a19cbd87a79",
            "d56cdd25-eb27-4aac-a2a3-5b101d3bf945",
            "60107e00-beea-41a9-b854-b5b8771703b6",
            "b26be1d5-6da0-46f6-9a0a-99df25d4446d",
            "d0fc8d2d-cb23-48d7-830a-bf88dfe722d4",
            "35f3ab8a-befa-4f02-9ea5-0f9584959da7",
            "81d2fc55-1187-4905-abf3-e0a2d73e1657"
          ],
          "failures": [
            "3b424be0-3d40-4895-bfa5-0f6cf95e5f2f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
          "title": "capitalize",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\stringUtils.spec.js",
          "file": "\\test\\stringUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should capitalize the first letter of a string",
              "fullTitle": "capitalize should capitalize the first letter of a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('hello')).to.equal('Hello');\nexpect(capitalize('world')).to.equal('World');",
              "err": {},
              "uuid": "61834b3d-9a8a-495b-9a0e-5f3f9cc653a9",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same string if the first letter is already capitalized",
              "fullTitle": "capitalize should return the same string if the first letter is already capitalized",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('Hello')).to.equal('Hello');",
              "err": {},
              "uuid": "532f08f3-028f-4875-b50f-3516b8a1fc23",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same string if all letters are uppercase",
              "fullTitle": "capitalize should return the same string if all letters are uppercase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('HELLO')).to.equal('HELLO');",
              "err": {},
              "uuid": "820774c4-cbbd-4ba0-9fa7-dd73f5387432",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle single character string",
              "fullTitle": "capitalize should handle single character string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('a')).to.equal('A');\nexpect(capitalize('Z')).to.equal('Z');",
              "err": {},
              "uuid": "4f03c2de-1f04-4b99-9eb6-25cbcbcfa947",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string if input is empty string",
              "fullTitle": "capitalize should return empty string if input is empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('')).to.equal('');",
              "err": {},
              "uuid": "8675b0ad-89da-46b5-87f6-c4e5f75ff83f",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not change a string with only spaces",
              "fullTitle": "capitalize should not change a string with only spaces",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('   ')).to.equal('   ');",
              "err": {},
              "uuid": "f33db8b4-939e-4cc7-9e4f-bf7c1c0eb933",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not a string",
              "fullTitle": "capitalize should throw an error if input is not a string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => capitalize(123)).to.throw('Input must be a string');\nexpect(() => capitalize(null)).to.throw('Input must be a string');\nexpect(() => capitalize(undefined)).to.throw('Input must be a string');\nexpect(() => capitalize([])).to.throw('Input must be a string');",
              "err": {},
              "uuid": "9bafd3d9-8529-4a46-8aaf-55768a83e230",
              "parentUUID": "c5ef53a9-b6a9-43d9-96df-83e67859d5c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61834b3d-9a8a-495b-9a0e-5f3f9cc653a9",
            "532f08f3-028f-4875-b50f-3516b8a1fc23",
            "820774c4-cbbd-4ba0-9fa7-dd73f5387432",
            "4f03c2de-1f04-4b99-9eb6-25cbcbcfa947",
            "8675b0ad-89da-46b5-87f6-c4e5f75ff83f",
            "f33db8b4-939e-4cc7-9e4f-bf7c1c0eb933",
            "9bafd3d9-8529-4a46-8aaf-55768a83e230"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
          "title": "reverseString",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\stringUtils.spec.js",
          "file": "\\test\\stringUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the reversed string",
              "fullTitle": "reverseString should return the reversed string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('hello')).to.equal('olleh');\nexpect(reverseString('world')).to.equal('dlrow');",
              "err": {},
              "uuid": "2f569579-337d-4130-8ac2-fc386da28292",
              "parentUUID": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same string for single character input",
              "fullTitle": "reverseString should return the same string for single character input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('a')).to.equal('a');\nexpect(reverseString('Z')).to.equal('Z');",
              "err": {},
              "uuid": "3223449c-2580-400f-ba79-78fecf33b05a",
              "parentUUID": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string if input is empty string",
              "fullTitle": "reverseString should return empty string if input is empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('')).to.equal('');",
              "err": {},
              "uuid": "7f6a6787-ba7f-47f7-a587-7ae6f5fe21aa",
              "parentUUID": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should correctly reverse a string with spaces and special characters",
              "fullTitle": "reverseString should correctly reverse a string with spaces and special characters",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('hello world!')).to.equal('!dlrow olleh');",
              "err": {},
              "uuid": "82e0307a-9622-42c9-b1aa-ff6cc677afc2",
              "parentUUID": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should correctly reverse a string with numbers and special characters",
              "fullTitle": "reverseString should correctly reverse a string with numbers and special characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reverseString('123abc!')).to.equal('!cba321');",
              "err": {},
              "uuid": "fe872caf-1903-47db-a417-c50193359b25",
              "parentUUID": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not a string",
              "fullTitle": "reverseString should throw an error if input is not a string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => reverseString(123)).to.throw('Input must be a string');\nexpect(() => reverseString(null)).to.throw('Input must be a string');\nexpect(() => reverseString(undefined)).to.throw('Input must be a string');\nexpect(() => reverseString([])).to.throw('Input must be a string');",
              "err": {},
              "uuid": "8c47229d-a6ad-4d75-89e6-fe7f66514c63",
              "parentUUID": "c204ad4c-d6da-45e2-8ac2-c9c794bd7e94",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f569579-337d-4130-8ac2-fc386da28292",
            "3223449c-2580-400f-ba79-78fecf33b05a",
            "7f6a6787-ba7f-47f7-a587-7ae6f5fe21aa",
            "82e0307a-9622-42c9-b1aa-ff6cc677afc2",
            "fe872caf-1903-47db-a417-c50193359b25",
            "8c47229d-a6ad-4d75-89e6-fe7f66514c63"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c4688633-14d6-4bab-b693-3c22b3422c22",
          "title": "isPalindrome",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\stringUtils.spec.js",
          "file": "\\test\\stringUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a palindrome string",
              "fullTitle": "isPalindrome should return true for a palindrome string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('madam')).to.equal(true);\nexpect(isPalindrome('racecar')).to.equal(true);",
              "err": {},
              "uuid": "9b7bb308-1362-40ed-b37e-ebef099c8274",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a case-insensitive palindrome",
              "fullTitle": "isPalindrome should return true for a case-insensitive palindrome",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('Madam')).to.equal(false);\nexpect(isPalindrome('RaceCar')).to.equal(false);",
              "err": {},
              "uuid": "7b4bf9c9-0136-4725-b820-7afdbec6503d",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-palindrome string",
              "fullTitle": "isPalindrome should return false for a non-palindrome string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('hello')).to.equal(false);\nexpect(isPalindrome('world')).to.equal(false);",
              "err": {},
              "uuid": "042b51b2-dcb4-44ce-8b54-3b1e15aa6f41",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a single character string",
              "fullTitle": "isPalindrome should return true for a single character string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('a')).to.equal(true);\nexpect(isPalindrome('Z')).to.equal(true);",
              "err": {},
              "uuid": "11c0a3dc-2e7a-4ba9-b466-62f460300f23",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty string (considered a palindrome)",
              "fullTitle": "isPalindrome should return true for an empty string (considered a palindrome)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('')).to.equal(true);",
              "err": {},
              "uuid": "3ebfb36e-9f2b-47d4-b196-e55e73c89308",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a palindrome with spaces when exactly reversed",
              "fullTitle": "isPalindrome should return true for a palindrome with spaces when exactly reversed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('a b c b a')).to.equal(true);",
              "err": {},
              "uuid": "b8693e6d-8b8f-456b-84ab-e2c81a063211",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string with mixed characters that is not a palindrome",
              "fullTitle": "isPalindrome should return false for a string with mixed characters that is not a palindrome",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isPalindrome('123abc321')).to.equal(false);",
              "err": {},
              "uuid": "05d6f67b-11ea-4d5e-9d42-232659355e01",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not a string",
              "fullTitle": "isPalindrome should throw an error if input is not a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => isPalindrome(123)).to.throw('Input must be a string');\nexpect(() => isPalindrome(null)).to.throw('Input must be a string');\nexpect(() => isPalindrome(undefined)).to.throw('Input must be a string');\nexpect(() => isPalindrome([])).to.throw('Input must be a string');",
              "err": {},
              "uuid": "4ce6ae71-3fd5-4e71-84e6-abbb725891af",
              "parentUUID": "c4688633-14d6-4bab-b693-3c22b3422c22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b7bb308-1362-40ed-b37e-ebef099c8274",
            "7b4bf9c9-0136-4725-b820-7afdbec6503d",
            "042b51b2-dcb4-44ce-8b54-3b1e15aa6f41",
            "11c0a3dc-2e7a-4ba9-b466-62f460300f23",
            "3ebfb36e-9f2b-47d4-b196-e55e73c89308",
            "b8693e6d-8b8f-456b-84ab-e2c81a063211",
            "05d6f67b-11ea-4d5e-9d42-232659355e01",
            "4ce6ae71-3fd5-4e71-84e6-abbb725891af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
          "title": "checkStudentKnowledge",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\studentKnowledgeCheckerUtils.spec.js",
          "file": "\\test\\studentKnowledgeCheckerUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true when all answers are correct and keys are in the same order",
              "fullTitle": "checkStudentKnowledge should return true when all answers are correct and keys are in the same order",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'A', q2: 'B', q3: 'C' };\nconst correct = { q1: 'A', q2: 'B', q3: 'C' };\nexpect(checkStudentKnowledge(student, correct)).to.be.true;",
              "err": {},
              "uuid": "19a568c5-46e8-472a-94f9-349cf5a88a3a",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when at least one answer is incorrect",
              "fullTitle": "checkStudentKnowledge should return false when at least one answer is incorrect",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'A', q2: 'B', q3: 'D' };\nconst correct = { q1: 'A', q2: 'B', q3: 'C' };\nexpect(checkStudentKnowledge(student, correct)).to.be.false;",
              "err": {},
              "uuid": "67cec995-4867-4e1e-abe8-b010dbae01ad",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when keys are the same but in different order",
              "fullTitle": "checkStudentKnowledge should return false when keys are the same but in different order",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q2: 'B', q1: 'A', q3: 'C' };\nconst correct = { q1: 'A', q2: 'B', q3: 'C' };\nexpect(checkStudentKnowledge(student, correct)).to.be.false;",
              "err": {},
              "uuid": "f99bc9ec-94d0-4b2a-97e3-eb3d17f76c3d",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when student has extra answers",
              "fullTitle": "checkStudentKnowledge should return false when student has extra answers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'A', q2: 'B', q3: 'C', q4: 'D' };\nconst correct = { q1: 'A', q2: 'B', q3: 'C' };\nexpect(checkStudentKnowledge(student, correct)).to.be.false;",
              "err": {},
              "uuid": "5b783f11-7e99-4260-bff8-48f8d8702f08",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when student missed some answers",
              "fullTitle": "checkStudentKnowledge should return false when student missed some answers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'A', q2: 'B' };\nconst correct = { q1: 'A', q2: 'B', q3: 'C' };\nexpect(checkStudentKnowledge(student, correct)).to.be.false;",
              "err": {},
              "uuid": "ffe92613-a678-440f-883d-e05c92042af5",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if answers differ only by letter case",
              "fullTitle": "checkStudentKnowledge should return false if answers differ only by letter case",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'a' };\nconst correct = { q1: 'A' };\nexpect(checkStudentKnowledge(student, correct)).to.equal(false);",
              "err": {},
              "uuid": "b0dff7e5-8812-4796-8001-0d1844218e32",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for two empty objects (no questions)",
              "fullTitle": "checkStudentKnowledge should return true for two empty objects (no questions)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(checkStudentKnowledge({}, {})).to.be.true;",
              "err": {},
              "uuid": "28720d2e-552a-41d6-af93-02586d85cb37",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a single matching question-answer pair",
              "fullTitle": "checkStudentKnowledge should return true for a single matching question-answer pair",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(checkStudentKnowledge({ q1: '42' }, { q1: '42' })).to.be.true;",
              "err": {},
              "uuid": "8ab75358-eaec-45b7-80ca-e46020be29e4",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a single question with wrong answer",
              "fullTitle": "checkStudentKnowledge should return false for a single question with wrong answer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(checkStudentKnowledge({ q1: 'wrong' }, { q1: 'right' })).to.be.false;",
              "err": {},
              "uuid": "c279f3c8-c984-42ec-b1e2-bf65d1f7a0dd",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for two empty objects",
              "fullTitle": "checkStudentKnowledge should return true for two empty objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(checkStudentKnowledge({}, {})).to.equal(true);",
              "err": {},
              "uuid": "00eab190-2e77-41db-8e42-2c43190469e2",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if answer types differ (string vs number)",
              "fullTitle": "checkStudentKnowledge should return false if answer types differ (string vs number)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: '1' };\nconst correct = { q1: 1 };\nexpect(checkStudentKnowledge(student, correct)).to.equal(false);",
              "err": {},
              "uuid": "f6b093dc-a363-4da2-a9d9-1c692c9d73a2",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw if inputs are not objects",
              "fullTitle": "checkStudentKnowledge should throw if inputs are not objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  checkStudentKnowledge(null, null);\n} catch (e) {\n  expect(e).to.be.instanceOf(TypeError);\n  return;\n}\nthrow new Error('Expected function to throw');",
              "err": {},
              "uuid": "2a0c1e45-6d24-4bc7-bfa4-4f5b5efd3446",
              "parentUUID": "ff9b4798-08fd-46bb-9e49-ef29e1ca673a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19a568c5-46e8-472a-94f9-349cf5a88a3a",
            "67cec995-4867-4e1e-abe8-b010dbae01ad",
            "f99bc9ec-94d0-4b2a-97e3-eb3d17f76c3d",
            "5b783f11-7e99-4260-bff8-48f8d8702f08",
            "ffe92613-a678-440f-883d-e05c92042af5",
            "b0dff7e5-8812-4796-8001-0d1844218e32",
            "28720d2e-552a-41d6-af93-02586d85cb37",
            "8ab75358-eaec-45b7-80ca-e46020be29e4",
            "c279f3c8-c984-42ec-b1e2-bf65d1f7a0dd",
            "00eab190-2e77-41db-8e42-2c43190469e2",
            "f6b093dc-a363-4da2-a9d9-1c692c9d73a2",
            "2a0c1e45-6d24-4bc7-bfa4-4f5b5efd3446"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "361755f6-aa34-4bea-82a6-f23783ef5c18",
          "title": "filterUsersByAge",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\usersListUtils.spec.js",
          "file": "\\test\\usersListUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter users within age range",
              "fullTitle": "filterUsersByAge should filter users within age range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 20, 30);\nexpect(result.map(u => u.name)).to.have.members(['Olga', 'Ivan', 'Maria']);",
              "err": {},
              "uuid": "d025362b-9d03-4dc3-b193-4316654d3136",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user on exact minAge and maxAge boundaries",
              "fullTitle": "filterUsersByAge should return user on exact minAge and maxAge boundaries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 18, 25);\nexpect(result.map(u => u.name)).to.include.members(['egor', 'Olga']);",
              "err": {},
              "uuid": "cdf01ed5-0096-4c9b-9152-e1c570df7ce9",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all users if minAge is 0 and maxAge is Infinity",
              "fullTitle": "filterUsersByAge should return all users if minAge is 0 and maxAge is Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = filterUsersByAge(users, 0, Infinity);\nexpect(result.length).to.equal(users.length);",
              "err": {},
              "uuid": "b13830dd-8674-4b86-81ca-6dba88258e51",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array if no one fits",
              "fullTitle": "filterUsersByAge should return empty array if no one fits",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filterUsersByAge(users, 100, 120)).to.deep.equal([]);",
              "err": {},
              "uuid": "3cf7d818-59df-474f-8e82-c3261d038e89",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array for empty user list",
              "fullTitle": "filterUsersByAge should return empty array for empty user list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filterUsersByAge([], 18, 30)).to.deep.equal([]);",
              "err": {},
              "uuid": "b94d3b85-75a7-4125-b5fc-e18227492c3d",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw if users is not an array",
              "fullTitle": "filterUsersByAge should throw if users is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => filterUsersByAge(null, 18, 30)).to.throw();",
              "err": {},
              "uuid": "16be32a1-2d4f-4217-bd49-72bc34d7f763",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore users without age field",
              "fullTitle": "filterUsersByAge should ignore users without age field",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expandedUsers = [...users, { id: 5, name: 'Alex' }];\nconst result = filterUsersByAge(expandedUsers, 18, 30);\nexpect(result).to.not.deep.include({ id: 5, name: 'Alex' });",
              "err": {},
              "uuid": "651461cc-374b-476e-aa4e-1ef322eb6c42",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if users is not an array",
              "fullTitle": "filterUsersByAge should throw an error if users is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => sortUsersByName(null)).to.throw('Users must be an array');\nexpect(() => sortUsersByName(undefined)).to.throw('Users must be an array');\nexpect(() => sortUsersByName(123)).to.throw('Users must be an array');\nexpect(() => sortUsersByName({ name: 'Olga' })).to.throw('Users must be an array');\nexpect(() => sortUsersByName('not an array')).to.throw('Users must be an array');",
              "err": {},
              "uuid": "737033f9-25a4-42de-9e93-8dfc7b263686",
              "parentUUID": "361755f6-aa34-4bea-82a6-f23783ef5c18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d025362b-9d03-4dc3-b193-4316654d3136",
            "cdf01ed5-0096-4c9b-9152-e1c570df7ce9",
            "b13830dd-8674-4b86-81ca-6dba88258e51",
            "3cf7d818-59df-474f-8e82-c3261d038e89",
            "b94d3b85-75a7-4125-b5fc-e18227492c3d",
            "16be32a1-2d4f-4217-bd49-72bc34d7f763",
            "651461cc-374b-476e-aa4e-1ef322eb6c42",
            "737033f9-25a4-42de-9e93-8dfc7b263686"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1792e7a8-4604-4f93-8b26-c2718ced752b",
          "title": "sortUsersByName",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\usersListUtils.spec.js",
          "file": "\\test\\usersListUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sort users alphabetically by name )",
              "fullTitle": "sortUsersByName should sort users alphabetically by name )",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = sortUsersByName(users);\n// Сортировка с учётом регистра: заглавные буквы раньше строчных\nexpect(result.map(u => u.name)).to.deep.equal(['egor', 'Ivan', 'Maria', 'Olga']);",
              "err": {},
              "uuid": "ccf4d36d-2173-4e9a-8842-1e5ee802c288",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sort users with non-alphabetic characters in name",
              "fullTitle": "sortUsersByName should sort users with non-alphabetic characters in name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersWithSymbols = [...users, { id: 5, name: '@lex', age: 40, email: 'alex@example.com' }];\nconst result = sortUsersByName(usersWithSymbols);\nexpect(result[0].name).to.equal('@lex');",
              "err": {},
              "uuid": "2a3b58b4-dea1-47d5-a01c-732352f15b06",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle mixed case names using localeCompare",
              "fullTitle": "sortUsersByName should handle mixed case names using localeCompare",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = sortUsersByName(users);\nexpect(result.map(u => u.name)[0]).to.equal('egor');",
              "err": {},
              "uuid": "90383e8c-f174-4a52-8c9a-dd988cc592bf",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw if users is not an array",
              "fullTitle": "sortUsersByName should throw if users is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => sortUsersByName(null)).to.throw();",
              "err": {},
              "uuid": "ba7900f7-2cb0-460b-9372-e180d1e64cdf",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with empty user array",
              "fullTitle": "sortUsersByName should work with empty user array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(sortUsersByName([])).to.deep.equal([]);",
              "err": {},
              "uuid": "927f9069-cafa-4d91-9b99-c1489cea9364",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sort names with mixed unicode characters",
              "fullTitle": "sortUsersByName should sort names with mixed unicode characters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unicodeUsers = [\n  { id: 1, name: 'Álvaro', age: 25, email: 'a@a.com' },\n  { id: 2, name: 'Aarón', age: 25, email: 'b@b.com' },\n];\nconst result = sortUsersByName(unicodeUsers);\nexpect(result.map(u => u.name)).to.deep.equal(['Aarón', 'Álvaro']);",
              "err": {},
              "uuid": "1cbd9251-9aa0-4184-a6f0-6ab4e2cfebe8",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not modify the original array",
              "fullTitle": "sortUsersByName should not modify the original array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const copy = [...users];\nsortUsersByName(users);\nexpect(users).to.deep.equal(copy);",
              "err": {},
              "uuid": "7471a6f5-3c0c-4b37-b934-d99f325345be",
              "parentUUID": "1792e7a8-4604-4f93-8b26-c2718ced752b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccf4d36d-2173-4e9a-8842-1e5ee802c288",
            "2a3b58b4-dea1-47d5-a01c-732352f15b06",
            "90383e8c-f174-4a52-8c9a-dd988cc592bf",
            "ba7900f7-2cb0-460b-9372-e180d1e64cdf",
            "927f9069-cafa-4d91-9b99-c1489cea9364",
            "1cbd9251-9aa0-4184-a6f0-6ab4e2cfebe8",
            "7471a6f5-3c0c-4b37-b934-d99f325345be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "909a5a21-071f-475f-be74-677a03432523",
          "title": "findUserById",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\usersListUtils.spec.js",
          "file": "\\test\\usersListUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the user with the given id",
              "fullTitle": "findUserById should return the user with the given id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = findUserById(users, 2);\nexpect(result.name).to.equal('Ivan');",
              "err": {},
              "uuid": "a2b81189-4073-4c8a-94dd-9e1cbe2e5f4b",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user with id 0 if exists",
              "fullTitle": "findUserById should find user with id 0 if exists",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const withZeroId = [{ id: 0, name: 'Zero', age: 20, email: 'z@z.com' }, ...users];\nconst result = findUserById(withZeroId, 0);\nexpect(result.name).to.equal('Zero');",
              "err": {},
              "uuid": "fd1bf1d3-8220-4cd7-a12b-42a601688d53",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle users with missing id field",
              "fullTitle": "findUserById should handle users with missing id field",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixed = [...users, { name: 'Alex', email: 'alex@nowhere.com' }];\nexpect(findUserById(mixed, 999)).to.equal(null);",
              "err": {},
              "uuid": "a3ddffc3-3439-4427-962f-c84f65be27eb",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user with id is not found",
              "fullTitle": "findUserById should return null if user with id is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findUserById(users, 999)).to.equal(null);",
              "err": {},
              "uuid": "815aae0a-f295-40f9-afed-b3f83c2759ba",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if id is null or undefined",
              "fullTitle": "findUserById should return null if id is null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findUserById(users, null)).to.equal(null);\nexpect(findUserById(users, undefined)).to.equal(null);",
              "err": {},
              "uuid": "95df5ad0-0a05-407b-a784-8014a6753b55",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if id is NaN or invalid",
              "fullTitle": "findUserById should return null if id is NaN or invalid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(findUserById(users, 'abc')).to.equal(null);",
              "err": {},
              "uuid": "07073c0e-a359-422e-8dd7-a6af240987f7",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw if users is not an array",
              "fullTitle": "findUserById should throw if users is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => findUserById(null, 2)).to.throw();",
              "err": {},
              "uuid": "fbd4eaf0-d6f5-4bd1-acf2-d90cf1d26342",
              "parentUUID": "909a5a21-071f-475f-be74-677a03432523",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2b81189-4073-4c8a-94dd-9e1cbe2e5f4b",
            "fd1bf1d3-8220-4cd7-a12b-42a601688d53",
            "a3ddffc3-3439-4427-962f-c84f65be27eb",
            "815aae0a-f295-40f9-afed-b3f83c2759ba",
            "95df5ad0-0a05-407b-a784-8014a6753b55",
            "07073c0e-a359-422e-8dd7-a6af240987f7",
            "fbd4eaf0-d6f5-4bd1-acf2-d90cf1d26342"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "081f516c-726c-4030-8e9c-780a66dfcaa8",
          "title": "isEmailTaken",
          "fullFile": "D:\\sdc-AQA\\SDC-AQA\\test\\usersListUtils.spec.js",
          "file": "\\test\\usersListUtils.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if email is found",
              "fullTitle": "isEmailTaken should return true if email is found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmailTaken(users, 'ivan@example.com')).to.be.true;",
              "err": {},
              "uuid": "892b2745-1ce4-4659-87e6-135486b53c28",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if email is not in the list",
              "fullTitle": "isEmailTaken should return false if email is not in the list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmailTaken(users, 'nobody@example.com')).to.be.false;",
              "err": {},
              "uuid": "5b79d4d5-c84d-46be-9b69-16fbbb6c4038",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for empty email string",
              "fullTitle": "isEmailTaken should return false for empty email string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmailTaken(users, '')).to.be.false;",
              "err": {},
              "uuid": "d218219a-7de2-42d4-abf0-949ab92eff26",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be case-sensitive by default",
              "fullTitle": "isEmailTaken should be case-sensitive by default",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmailTaken(users, 'IVAN@example.com')).to.be.false;",
              "err": {},
              "uuid": "878f53c1-0550-48ab-aae0-1e04a36f7f9a",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined email",
              "fullTitle": "isEmailTaken should return false for null or undefined email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmailTaken(users, null)).to.be.false;\nexpect(isEmailTaken(users, undefined)).to.be.false;",
              "err": {},
              "uuid": "459538e0-bedc-4930-94ab-9ee7554091ee",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if user has no email field",
              "fullTitle": "isEmailTaken should return false if user has no email field",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expandedUsers = [...users, { id: 5, name: 'Alex', age: 33 }];\nexpect(isEmailTaken(expandedUsers, 'alex@nowhere.com')).to.be.false;",
              "err": {},
              "uuid": "b0cb9b7b-f652-4d02-91bd-48d45c530147",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if email exists multiple times",
              "fullTitle": "isEmailTaken should return true if email exists multiple times",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duplicates = [...users, { id: 5, name: 'Peter', age: 22, email: 'olga@example.com' }];\nexpect(isEmailTaken(duplicates, 'olga@example.com')).to.be.true;",
              "err": {},
              "uuid": "918013f2-cd73-497e-9f66-baef6fa73bdd",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw if users is not an array",
              "fullTitle": "isEmailTaken should throw if users is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => isEmailTaken(null, 'ivan@example.com')).to.throw('Users must be an array');\nexpect(() => isEmailTaken({}, 'ivan@example.com')).to.throw('Users must be an array');\nexpect(() => isEmailTaken('not an array', 'ivan@example.com')).to.throw('Users must be an array');",
              "err": {},
              "uuid": "aba97048-3075-438c-9ba5-21a6147faab9",
              "parentUUID": "081f516c-726c-4030-8e9c-780a66dfcaa8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "892b2745-1ce4-4659-87e6-135486b53c28",
            "5b79d4d5-c84d-46be-9b69-16fbbb6c4038",
            "d218219a-7de2-42d4-abf0-949ab92eff26",
            "878f53c1-0550-48ab-aae0-1e04a36f7f9a",
            "459538e0-bedc-4930-94ab-9ee7554091ee",
            "b0cb9b7b-f652-4d02-91bd-48d45c530147",
            "918013f2-cd73-497e-9f66-baef6fa73bdd",
            "aba97048-3075-438c-9ba5-21a6147faab9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}